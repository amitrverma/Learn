ls()
name <- "amit"
name
ls()
setwd("C:/SourceCode/Learn/Analytics/R/Unit 3/Assignment")
setwd("C:/SourceCode/Learn/Analytics/R/Unit 3/Assignment/MUSIC RECORDS")
songs <- read.csv("songs.csv")
table(songs, songs$year == 2010)
tapply (songs, songs$year == 2010)
summary(songs)
str(songs)
subset(songs, songs$year == 2010)
count(subset(songs, songs$year == 2010))
summary(subset(songs, songs$year == 2010))
str(subset(songs, songs$year == 2010))
str(subset(songs, songs$artistname == Michael Jackson))
str(subset(songs, songs$artistname == "Michael Jackson"))
str(subset(songs, songs$artistname == "Michael Jackson" & songs$Top10 == 1))
subset(songs, songs$artistname == "Michael Jackson" & songs$Top10 == 1)
summary(songs)
str(songs)
subset(songs, songs$timesignature)
str(subset(songs, songs$timesignature))
tapply(songs, songs$timesignature)
tapply(songs, songs$timesignature, mean)
summary(songs$timesignature)
str(songs$timesignature)
sort(songs$timesignature)
sort(songs$tempo)
summary(songs, songs$tempo == 244.307)
which(songs, songs$tempo == 244.307)
which(songs$tempo == 244.307)
songs[which(songs$tempo == 244.307)]
songs[6206]
songs[6206,]
SongsTrain <- subset(songs, songs$year > 2010)
SongsTest <- subset(songs, songs$year > 2009)
SongsTrain <- subset(songs, songs$year < 2010)
nonvars <- c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[,!names(SongsTrain)%in%nonvars]
SongsTest = SongsTrain[,!names(SongsTest)%in%nonvars]
SongsTest = SongsTest[,!names(SongsTest)%in%nonvars]
SongsLog1 = glm(Top10 ~ ., data = SongsTrain, family = binomial)
summary(SongsLog1)
cor(SongsLog1)
cor(SongsLog1$coefficients)
cor(SongsTrain)
cor(SongsTrain$loudness, SongsTrain$energy)
SongsLog2 = glm(Top10 ~ .-loudness, data = SongsTrain, family = binomial)
summary(SongsLog2)
SongsLog = glm(Top10 ~ .-energy, data = SongsTrain, family = binomial)
SongsLog = glm(Top10 ~ ., data = SongsTrain, family = binomial)
SongsLog3 = glm(Top10 ~ .-energy, data = SongsTrain, family = binomial)
summary(SongsLog3)
predict3 = predict(SongsLog3, type = "response")
predict3 = predict(SongsLog3, newdata=SongsTest, type = "response")
table(SongsTest, predict3>=0.45)
auc = as.numeric(performance(predict3, "auc")@y.values)
library(ROCR)
auc = as.numeric(performance(predict3, "auc")@y.values)
table(SongsTest$Top10, predict3 > 0.45)
45/373
1- 45/373
table(SongsTest$Top10, SongsTrain$Top10)
table(SongsTest$Top10, SongsTrain$Top10, mean)
tapply(SongsTest$Top10, SongsTrain$Top10, mean)
table(SongsTrain$Top10)
1060/(6141+1060)
table(SongsTest$Top10)
59/(314+59)
table(SongsTest$Top10, SongsTrain$Top10)
table(SongsTest$Top10, SongsTrain$Top10, mean)
table(SongsTest, SongsTrain$Top10, mean)
1060/(6141+1060)
1-(1060/(6141+1060))
table(SongsTest$Top10)
table(SongsTest$Top10, predict3 > 0.45)
309/(309+5)
19/(40+19)
