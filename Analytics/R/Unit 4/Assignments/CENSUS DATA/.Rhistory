setwd("C:/SourceCode/Learn/Analytics/R/Unit 4/Assignments/CENSUS DATA")
setwd("C:/SourceCode/Learn/Analytics/R/Unit 4/Assignments/CENSUS DATA")
census = read.csv("census.csv")
set.seed(2000)
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
Train = subset(census , split == TRUE)
Test = subset(census, split == FALSE)
LogCensus = glm(over50k ~ ., data = Train, method = binomial)
LogCensus = glm(over50k ~ ., data = Train, type = "binomial")
LogCensus = glm(over50k ~ ., data = Train, family = "binomial")
summary(LogCensus)
predict = predict(LogCensus, newdata = Test)
?predict
table(Test$over50k, predict> 0.5)
(9351+1515)/nrow(Test)
table(Train$over50k)
table(Test$over50k)
9713/nrow(Test)
library(ROCR)
predictTest = predict(QualityLog, type="response", newdata = qualityTest)
ROCPredTest = prediction(predictTest, qualityTest$PoorCare)
auc = as.numeric(performance(ROCPredTest, "auc")@y.values)
predictTest = predict(LogCensus, type="response", newdata = Test)
ROCPredTest = prediction(predictTest, Test$over50k)
auc = as.numeric(performance(ROCPredTest, "auc")@y.values)
auc
library(rpart)
library(rpart.plot)
library(caret)
CARTCensus = rpart(over50k ~ ., data = train, method = "class")
CARTCensus = rpart(over50k ~ ., data = Train, method = "class")
prp(CARTCensus)
predict = predict(CARTCensus, newdata = Test, type="class")
table(Test$over50k, predict > 0.5)
table(Test$over50k, type="class")
table(Test$over50k, predict)
(9243+1596)/nrow(Test)
CARTPredTest = prediction(predict, Test$over50k)
predictCART = predict(CARTCensus, newdata = Test)
CARTPredTest = prediction(predictCART, Test$over50k)
library(ROCR)
library(randomForest)
set.seed(1)
TrainSmall = Train[sample(nrow(Train),2000),]
set.seed(1)
ForestTrainSmall = randomForest(over50k ~ .,data = TrainSmall)
predRandom = predict(ForestTrainSmall, Test$over50k)
predRandom = predict(ForestTrainSmall, newdata = Test)
table(Test$over50k, predRandom>0.5)
table(Test$over50k, predRandom)
(9555+1204)/(nrow(Test))
vu = varUsed(ForestTrainSmall, count=TRUE)
vu
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(ForestTrainSmall$forest$xlevels[vusorted$ix]))
varImpPlot(ForestTrainSmall)
