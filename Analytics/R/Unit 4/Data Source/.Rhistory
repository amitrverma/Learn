ls()
name <- "amit"
name
ls()
load("C:/SourceCode/Learn/Analytics/R/Unit 4/Data Source/.RData")
library(rpart)
setwd("C:/SourceCode/Learn/Analytics/R/Unit 4/Data Source")
stevens = read.csv("stevens.csv")
str(stevens)
library(caTools)
set.seed(3000)
split = sample.split(stevens$Reverse, SplitRatio = 0.7)
Train = subset(stevens, split == TRUE)
Test = subset(stevens, split == FALSE)
library(rpart)
library(rpart.plot)
StevensTree = rpart(Reverse ~ Circuit + Issue + Petitioner+ Respondent+ LowerCourt+ Unconst, data = Train, method = "class", minbucket = 25)
prp(StevensTree)
PredictCART = predict(StevensTree, newdata = Test)
PredictCART1 = predict(StevensTree, newdata = Train)
View(PredictCART1)
View(PredictCART1)
PredictCART1 = predict(StevensTree, newdata = Train, type = "class")
PredictCART1 = predict(StevensTree, newdata = Train, type = "class")
PredictCART = predict(StevensTree, newdata = Test, type = "class")
table(Test$Reverse, PredictCART)
(41+71)/nrow(Test)
library(ROCR)
PredictROC = predict(StevensTree, newdata = Test)
PredictROC
pred = prediction(PredictROC[,2], Test$Reverse)
perf = performance(pred, "tpr", "fpr")
plot(perf)
library(randomForest)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + UnConst, data = Train, noddesize = 25, ntree = 200)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, noddesize = 25, ntree = 200)
Train$Reverse = as.factor(Train$Reverse)
Test$Reverse = as.factor(Test$Reverse)
StevensForest = randomForest(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, noddesize = 25, ntree = 200)
PredictForest = predict(StevensForest, newdata = Test)
table(Test$Reverse, PredictForest)
(34+82) / nrow(Test)
library(caret)
library(e1071)
numFolds = trainControl(method = "cv", number = 10)
cpGrid = expand.grid(.cp=seq(0.01,0.5,0.01))
train(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="rpart", trControl = numFolds, tuneGrid = cpGrid)
StevensTreeCV = rpart(Reverse ~ Circuit + Issue + Petitioner + Respondent + LowerCourt + Unconst, data = Train, method="class", cp=0.18)
predicCV = predict(StevensTreeCV, newdata = Test, type="class")
table(Test$Reverse, predicCV)
(59+64)/nrow(Test)
setwd("C:/SourceCode/Learn/Analytics/R/Unit 4/Data Source")
boston = read.csv("boston.csv")
str(boston)
plot(boston$LAT, boston$LAt)
plot(boston$LAT, boston$LON)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS == 1],boston$LAT[boston$CHAS == 1], col="blue", pch=19)
points(boston$LON[boston$TRACT == 3531],boston$LAT[boston$TRACT == 3531], col="red", pch=19)
summary(boston$NOX)
points(boston$LON[boston$NOX >0.55],boston$LAT[boston$NOX>.55], col="green", pch=19)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV > 22.2],boston$LAT[boston$MEDV >22.2], col="red", pch=19)
plot(boston$LON, boston$LAT)
library(rpart)
library(rpart.plot)
latlontree = rpart(MEDV ~ LAT + LAN, data=boston)
latlontree = rpart(MEDV ~ LAT + LON, data=boston)
prp(latlontree)
library(caTools)
set.seed(123)
split = sample.split(boston$MEDV, SplitRatio=0.7)
Train = subset(boston, split== TRUE)
Test = subset(boston, split == FALSE)
View(boston)
linreg = lm(MEDV ~ LON + LAT + CRIM + ZN + INDUS + CHAS + NOX+ RM+ AGE + DIS + RAD + TAX + PTRATIO, data = train)
linreg = lm(MEDV ~ LON + LAT + CRIM + ZN + INDUS + CHAS + NOX+ RM+ AGE + DIS + RAD + TAX + PTRATIO, data = Train)
summary(linreg)
linreg.pred = predict(linreg, newdata = Test)
linreg.sse = sum((linreg.pred-Test$MEDV)^2)
linreg.sse
tree = rpart(MEDV ~ LON + LAT + CRIM + ZN + INDUS + CHAS + NOX+ RM+ AGE + DIS + RAD + TAX + PTRATIO, data = Train)
prp(tree)
library(caret)
library(e1071)
setwd("C:/SourceCode/Learn/Analytics/R/Unit 4/Assignments/WHY PEOPLE VOTE")
